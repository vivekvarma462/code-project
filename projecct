<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Study Platform</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .panel:hover {
            transform: translateY(-5px);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.15);
        }

        .panel h2 {
            color: #4a5568;
            margin-bottom: 20px;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .icon {
            width: 24px;
            height: 24px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 14px;
        }

        .file-upload {
            border: 2px dashed #667eea;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
        }

        .file-upload:hover {
            border-color: #764ba2;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
        }

        .file-upload input {
            display: none;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #48bb78, #38a169);
            box-shadow: 0 4px 15px rgba(72, 187, 120, 0.3);
        }

        .btn-secondary:hover {
            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.4);
        }

        .document-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .document-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            display: flex;
            justify-content: between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .document-item:hover {
            background: #e2e8f0;
            transform: translateX(5px);
        }

        .assessment-grid {
            display: grid;
            gap: 15px;
            margin-top: 20px;
        }

        .question {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            border-left: 4px solid #667eea;
        }

        .question h4 {
            color: #4a5568;
            margin-bottom: 15px;
        }

        .options {
            display: grid;
            gap: 10px;
        }

        .option {
            padding: 10px 15px;
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .option:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .option.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
        }

        .analytics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .metric-value {
            font-size: 2.5rem;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .metric-label {
            color: #666;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .chart-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .recommendations {
            background: linear-gradient(135deg, rgba(72, 187, 120, 0.1), rgba(56, 161, 105, 0.1));
            border: 2px solid #48bb78;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
        }

        .recommendation-item {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 10px;
            border-left: 4px solid #48bb78;
        }

        .tab-container {
            display: flex;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 10px;
            margin-bottom: 30px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #48bb78, #38a169);
            transition: width 0.5s ease;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .analytics-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ AI Study Platform</h1>
            <p>Personalized learning with AI-powered document processing, assessments, and analytics</p>
        </div>

        <div class="tab-container">
            <button class="tab active" onclick="showTab('documents')">üìö Documents</button>
            <button class="tab" onclick="showTab('assessment')">üìù Assessment</button>
            <button class="tab" onclick="showTab('analytics')">üìä Analytics</button>
            <button class="tab" onclick="showTab('recommendations')">üéØ AI Recommendations</button>
        </div>

        <!-- Documents Tab -->
        <div id="documents-tab" class="tab-content active">
            <div class="main-content">
                <div class="panel">
                    <h2><span class="icon">üìÅ</span>Document Processing</h2>
                    <div class="file-upload" onclick="document.getElementById('fileInput').click()">
                        <input type="file" id="fileInput" accept=".pdf,.txt,.docx" multiple onchange="handleFileUpload(event)">
                        <div style="font-size: 3rem; margin-bottom: 10px;">üìÑ</div>
                        <p><strong>Drop files here or click to browse</strong></p>
                        <p style="color: #666; margin-top: 10px;">Supports PDF, TXT, and DOCX files</p>
                    </div>
                    <button class="btn" onclick="processDocuments()" style="margin-top: 20px; width: 100%;">
                        Process Documents
                    </button>
                </div>

                <div class="panel">
                    <h2><span class="icon">üìã</span>Uploaded Documents</h2>
                    <div class="document-list" id="documentList">
                        <p style="color: #666; text-align: center; padding: 20px;">No documents uploaded yet</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Assessment Tab -->
        <div id="assessment-tab" class="tab-content">
            <div class="panel">
                <h2><span class="icon">üß†</span>AI-Generated Assessment</h2>
                <div class="loading" id="assessmentLoading">
                    <div class="spinner"></div>
                    <p>Generating personalized assessment...</p>
                </div>
                <div id="assessmentContent">
                    <p style="color: #666; text-align: center; padding: 40px;">Upload and process documents to generate assessments</p>
                </div>
                <button class="btn btn-secondary" onclick="submitAssessment()" id="submitBtn" style="display: none; margin-top: 20px;">
                    Submit Assessment
                </button>
            </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics-tab" class="tab-content">
            <div class="analytics-grid">
                <div class="metric-card">
                    <div class="metric-value" id="overallScore">--</div>
                    <div class="metric-label">Overall Score</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="studyStreak">0</div>
                    <div class="metric-label">Study Streak (days)</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="completedTests">0</div>
                    <div class="metric-label">Tests Completed</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value" id="avgTimeSpent">--</div>
                    <div class="metric-label">Avg. Time/Session</div>
                </div>
            </div>
            
            <div class="chart-container">
                <h2>üìà Progress Over Time</h2>
                <canvas id="progressChart" width="400" height="200"></canvas>
            </div>

            <div class="chart-container">
                <h2>üìä Subject Performance</h2>
                <canvas id="subjectChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- Recommendations Tab -->
        <div id="recommendations-tab" class="tab-content">
            <div class="panel">
                <h2><span class="icon">üéØ</span>AI Study Recommendations</h2>
                <div id="recommendationsContent">
                    <p style="color: #666; text-align: center; padding: 40px;">Complete assessments to receive personalized recommendations</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let documents = [];
        let assessments = [];
        let studyData = {
            scores: [65, 72, 78, 85, 82, 88, 91, 94],
            dates: ['Jan 15', 'Jan 22', 'Jan 29', 'Feb 5', 'Feb 12', 'Feb 19', 'Feb 26', 'Mar 5'],
            subjects: {
                'Mathematics': 85,
                'Science': 78,
                'History': 92,
                'Literature': 88,
                'Physics': 76
            },
            streak: 12,
            completedTests: 8,
            avgTime: '45 min'
        };

        // Tab management
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-tab').classList.add('active');
            event.target.classList.add('active');
            
            // Initialize charts if analytics tab is shown
            if (tabName === 'analytics') {
                setTimeout(initializeCharts, 100);
            }
        }

        // File upload handling
        function handleFileUpload(event) {
            const files = Array.from(event.target.files);
            files.forEach(file => {
                if (!documents.find(doc => doc.name === file.name)) {
                    documents.push({
                        name: file.name,
                        size: file.size,
                        type: file.type,
                        content: '',
                        processed: false
                    });
                }
            });
            updateDocumentList();
        }

        function updateDocumentList() {
            const list = document.getElementById('documentList');
            if (documents.length === 0) {
                list.innerHTML = '<p style="color: #666; text-align: center; padding: 20px;">No documents uploaded yet</p>';
                return;
            }

            list.innerHTML = documents.map(doc => `
                <div class="document-item">
                    <div>
                        <strong>${doc.name}</strong>
                        <br>
                        <small style="color: #666;">${(doc.size / 1024).toFixed(1)} KB</small>
                    </div>
                    <div style="color: ${doc.processed ? '#48bb78' : '#f56565'};">
                        ${doc.processed ? '‚úÖ Processed' : '‚è≥ Pending'}
                    </div>
                </div>
            `).join('');
        }

        // Document processing
        async function processDocuments() {
            if (documents.length === 0) {
                alert('Please upload some documents first');
                return;
            }

            const btn = event.target;
            btn.disabled = true;
            btn.textContent = 'Processing...';

            // Simulate document processing
            for (let i = 0; i < documents.length; i++) {
                await new Promise(resolve => setTimeout(resolve, 1000));
                documents[i].processed = true;
                documents[i].content = generateSampleContent(documents[i].name);
                updateDocumentList();
            }

            btn.disabled = false;
            btn.textContent = 'Process Documents';
            
            // Auto-generate assessment
            generateAssessment();
            alert('Documents processed successfully! Assessment generated.');
        }

        function generateSampleContent(fileName) {
            const topics = ['Mathematics', 'Science', 'History', 'Literature', 'Physics'];
            const topic = topics[Math.floor(Math.random() * topics.length)];
            return `Sample content for ${fileName} covering ${topic} concepts and theories.`;
        }

        // Assessment generation
        function generateAssessment() {
            const loading = document.getElementById('assessmentLoading');
            const content = document.getElementById('assessmentContent');
            
            loading.classList.add('show');
            content.innerHTML = '';
            
            setTimeout(() => {
                const questions = generateQuestions();
                content.innerHTML = `
                    <div class="assessment-grid">
                        ${questions.map((q, index) => `
                            <div class="question">
                                <h4>Question ${index + 1}: ${q.question}</h4>
                                <div class="options">
                                    ${q.options.map((option, optIndex) => `
                                        <div class="option" onclick="selectOption(${index}, ${optIndex})">
                                            ${option}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
                
                loading.classList.remove('show');
                document.getElementById('submitBtn').style.display = 'block';
                assessments = questions;
            }, 2000);
        }

        function generateQuestions() {
            const sampleQuestions = [
                {
                    question: "What is the primary function of mitochondria in cells?",
                    options: [
                        "Protein synthesis",
                        "Energy production",
                        "DNA replication",
                        "Cell division"
                    ],
                    correct: 1
                },
                {
                    question: "Which mathematical concept is used to find the rate of change?",
                    options: [
                        "Integration",
                        "Differentiation",
                        "Logarithms",
                        "Trigonometry"
                    ],
                    correct: 1
                },
                {
                    question: "What caused the start of World War I?",
                    options: [
                        "Economic depression",
                        "Assassination of Archduke Franz Ferdinand",
                        "Colonial disputes",
                        "Religious conflicts"
                    ],
                    correct: 1
                }
            ];
            
            return sampleQuestions.map(q => ({...q, selected: null}));
        }

        function selectOption(questionIndex, optionIndex) {
            assessments[questionIndex].selected = optionIndex;
            
            // Update UI
            const questionElement = document.querySelectorAll('.question')[questionIndex];
            questionElement.querySelectorAll('.option').forEach((opt, idx) => {
                opt.classList.toggle('selected', idx === optionIndex);
            });
        }

        function submitAssessment() {
            const unanswered = assessments.filter(q => q.selected === null).length;
            if (unanswered > 0) {
                alert(`Please answer all questions. ${unanswered} questions remaining.`);
                return;
            }

            const score = assessments.reduce((total, q) => {
                return total + (q.selected === q.correct ? 1 : 0);
            }, 0);
            
            const percentage = Math.round((score / assessments.length) * 100);
            
            // Update study data
            studyData.scores.push(percentage);
            studyData.dates.push(new Date().toLocaleDateString('en-US', {month: 'short', day: 'numeric'}));
            studyData.completedTests++;
            
            // Generate recommendations
            generateRecommendations(percentage, assessments);
            
            alert(`Assessment completed! Score: ${score}/${assessments.length} (${percentage}%)`);
            
            // Switch to analytics tab
            showTab('analytics');
        }

        // Analytics and charts
        function initializeCharts() {
            updateMetrics();
            createProgressChart();
            createSubjectChart();
        }

        function updateMetrics() {
            const latest = studyData.scores[studyData.scores.length - 1] || '--';
            document.getElementById('overallScore').textContent = latest + '%';
            document.getElementById('studyStreak').textContent = studyData.streak;
            document.getElementById('completedTests').textContent = studyData.completedTests;
            document.getElementById('avgTimeSpent').textContent = studyData.avgTime;
        }

        function createProgressChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: studyData.dates,
                    datasets: [{
                        label: 'Score (%)',
                        data: studyData.scores,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        function createSubjectChart() {
            const ctx = document.getElementById('subjectChart').getContext('2d');
            
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: Object.keys(studyData.subjects),
                    datasets: [{
                        label: 'Performance',
                        data: Object.values(studyData.subjects),
                        borderColor: '#48bb78',
                        backgroundColor: 'rgba(72, 187, 120, 0.2)',
                        pointBackgroundColor: '#48bb78'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100
                        }
                    }
                }
            });
        }

        // AI Recommendations
        function generateRecommendations(score, questions) {
            const recommendations = [];
            
            if (score < 60) {
                recommendations.push({
                    type: 'study',
                    title: 'Focus on Fundamentals',
                    description: 'Review basic concepts and practice more problems to build a stronger foundation.'
                });
            } else if (score < 80) {
                recommendations.push({
                    type: 'practice',
                    title: 'Targeted Practice',
                    description: 'Focus on areas where you made mistakes and do additional practice exercises.'
                });
            } else {
                recommendations.push({
                    type: 'advanced',
                    title: 'Advanced Topics',
                    description: 'Great job! Try tackling more challenging problems and advanced concepts.'
                });
            }

            // Analyze incorrect answers
            const incorrectTopics = questions.filter(q => q.selected !== q.correct);
            if (incorrectTopics.length > 0) {
                recommendations.push({
                    type: 'review',
                    title: 'Review Specific Topics',
                    description: `Focus on reviewing topics related to your incorrect answers.`
                });
            }

            // Time-based recommendations
            recommendations.push({
                type: 'schedule',
                title: 'Study Schedule',
                description: 'Maintain consistent daily study sessions of 30-45 minutes for optimal retention.'
            });

            updateRecommendationsUI(recommendations);
        }

        function updateRecommendationsUI(recommendations) {
            const content = document.getElementById('recommendationsContent');
            
            content.innerHTML = `
                <div class="recommendations">
                    <h3 style="margin-bottom: 20px; color: #48bb78;">üéØ Personalized Recommendations</h3>
                    ${recommendations.map(rec => `
                        <div class="recommendation-item">
                            <h4 style="color: #4a5568; margin-bottom: 10px;">${rec.title}</h4>
                            <p style="color: #666;">${rec.description}</p>
                        </div>
                    `).join('')}
                </div>
                
                <div style="margin-top: 30px; padding: 20px; background: rgba(102, 126, 234, 0.1); border-radius: 15px;">
                    <h3 style="color: #667eea; margin-bottom: 15px;">üìö Study Tips</h3>
                    <ul style="color: #666; line-height: 1.6;">
                        <li>Use active recall techniques instead of just re-reading</li>
                        <li>Take regular breaks using the Pomodoro Technique</li>
                        <li>Create mind maps to visualize connections between concepts</li>
                        <li>Test yourself frequently to identify knowledge gaps</li>
                    </ul>
                </div>
            `;
        }

        // Initialize the platform
        document.addEventListener('DOMContentLoaded', function() {
            updateDocumentList();
            
            // Add some sample data for demonstration
            setTimeout(() => {
                generateRecommendations(85, []);
            }, 1000);
        });
    </script>
</body>
</html>
