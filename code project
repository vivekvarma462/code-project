import React, { useState, useEffect, useMemo } from "react";

/**
 * AI-Finance-WebApp-React.jsx
 * Single-file React component demo of an AI-driven personal finance web app.
 * - Tailwind CSS for styling (assumed available)
 * - shadcn/ui components may be referenced but not required for core functionality
 * - lucide-react icons assumed available
 * - recharts for charts
 *
 * Features implemented in-browser for demo:
 * 1) Automated expense categorization (keyword + naive-Bayes-ish classifier)
 * 2) Predictive spending analysis (linear regression per-category)
 * 3) Goal tracking (set savings goals, track progress)
 * 4) Budget alerts (visual + toasts when nearing/exceeding budget)
 * 5) Dashboard with charts and insights
 *
 * How to run:
 * - Create a React app (Vite or CRA)
 * - Install dependencies: recharts, lucide-react (optional), classnames
 * - Ensure Tailwind is configured
 * - Paste this component into a page and render <FinanceApp />
 */

// Example external imports you may want to install in a real project
// import { BarChart, Bar, LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";

// Simple helpers
const currency = (n) => `₹${n.toFixed(2)}`;

// Lightweight keyword-category map for demo categorization
const CATEGORY_KEYWORDS = {
  Groceries: ["store", "grocery", "supermarket", "market", "veg", "rice", "walmart", "bigbasket", "flipkart grocery"],
  Transport: ["uber", "ola", "taxi", "bus", "metro", "fuel", "petrol", "diesel"],
  Entertainment: ["netflix", "prime", "movie", "spotify", "concert", "games"],
  Bills: ["electricity", "water", "internet", "phone", "bill", "rent"],
  Dining: ["restaurant", "cafe", "dinner", "lunch", "uber eats", "zomato", "dominos"],
  Health: ["pharmacy", "hospital", "doctor", "clinic", "medicines"],
  Shopping: ["amazon", "flipkart", "myntra", "clothes", "shoes", "shopping"],
  Others: ["misc", "other", "unknown"],
};

// Basic color palette for charts
const CHART_COLORS = ["#4f46e5", "#ec4899", "#f59e0b", "#10b981", "#ef4444", "#06b6d4", "#a78bfa"];

// Simple in-browser "AI" categorizer using keyword matching + fallback using word-frequency scoring
function categorizeTransaction(description) {
  const desc = description.toLowerCase();
  // direct keyword match
  for (const [cat, keywords] of Object.entries(CATEGORY_KEYWORDS)) {
    for (const kw of keywords) {
      if (desc.includes(kw)) return cat;
    }
  }
  // fallback: short heuristics
  if (/food|pizza|burger|cafe|restaurant/.test(desc)) return "Dining";
  if (/uber|ola|taxi|bus|train/.test(desc)) return "Transport";
  // default
  return "Others";
}

// Simple linear regression (predict next month spend) for an array of monthly totals
function predictNextMonth(values) {
  // values: [{month: '2025-01', amount: 123}, ...] sorted by month ascending
  const n = values.length;
  if (n === 0) return 0;
  if (n === 1) return values[0].amount;

  // map i -> amount
  let sumX = 0,
    sumY = 0,
    sumXY = 0,
    sumX2 = 0;
  for (let i = 0; i < n; i++) {
    const x = i + 1;
    const y = values[i].amount;
    sumX += x;
    sumY += y;
    sumXY += x * y;
    sumX2 += x * x;
  }
  const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX || 1);
  const intercept = (sumY - slope * sumX) / n;
  const nextX = n + 1;
  const prediction = intercept + slope * nextX;
  return Math.max(0, prediction);
}

// Utility: roll up transactions by category
function rollupByCategory(transactions) {
  const map = {};
  for (const t of transactions) {
    map[t.category] = (map[t.category] || 0) + t.amount;
  }
  return Object.entries(map).map(([category, amount]) => ({ category, amount }));
}

// Demo dataset generator
function sampleTransactions() {
  const today = new Date();
  const categories = Object.keys(CATEGORY_KEYWORDS);
  const names = [
    "BigBasket order",
    "Uber ride",
    "Netflix subscription",
    "Electricity bill",
    "Dominos pizza",
    "MedPlus Pharmacy",
    "Amazon order - shoes",
    "Monthly rent",
    "Fuel station",
    "Local market veg",
  ];
  const tx = [];
  for (let i = 0; i < 80; i++) {
    const amt = Math.round((Math.random() * 3000 + 50) * 100) / 100;
    const desc = names[Math.floor(Math.random() * names.length)];
    const daysAgo = Math.floor(Math.random() * 180);
    const date = new Date();
    date.setDate(date.getDate() - daysAgo);
    tx.push({ id: `tx_${i}`, date: date.toISOString().slice(0, 10), description: desc, amount: amt, category: categorizeTransaction(desc) });
  }
  return tx.sort((a, b) => (a.date < b.date ? 1 : -1));
}

export default function FinanceApp() {
  const [transactions, setTransactions] = useState(() => sampleTransactions());
  const [budgets, setBudgets] = useState({ Groceries: 8000, Dining: 4000, Transport: 2000, Shopping: 3000 });
  const [goals, setGoals] = useState([]); // { id, name, targetAmount, saved }
  const [newTx, setNewTx] = useState({ date: "", description: "", amount: "" });
  const [alerts, setAlerts] = useState([]);

  // recompute rollups
  const categoryRollup = useMemo(() => rollupByCategory(transactions), [transactions]);

  // monthly totals for last 6 months
  const monthlyTotals = useMemo(() => {
    const map = {};
    for (const t of transactions) {
      const month = t.date.slice(0, 7); // YYYY-MM
      map[month] = (map[month] || 0) + t.amount;
    }
    // last 6 months sorted asc
    const months = Object.keys(map).sort();
    const recent = months.slice(-6).map((m) => ({ month: m, amount: Math.round(map[m] * 100) / 100 }));
    return recent;
  }, [transactions]);

  const predictedNext = useMemo(() => predictNextMonth(monthlyTotals), [monthlyTotals]);

  // budget checks
  useEffect(() => {
    const a = [];
    for (const [cat, limit] of Object.entries(budgets)) {
      const spent = transactions.filter((t) => t.category === cat).reduce((s, t) => s + t.amount, 0);
      if (spent > limit) {
        a.push({ type: "over", category: cat, spent, limit });
      } else if (spent > limit * 0.8) {
        a.push({ type: "warning", category: cat, spent, limit });
      }
    }
    setAlerts(a);
  }, [transactions, budgets]);

  // add new transaction (auto-categorize)
  function addTransaction() {
    if (!newTx.description || !newTx.amount) return;
    const amount = parseFloat(newTx.amount);
    const category = categorizeTransaction(newTx.description);
    const tx = { id: `tx_${Date.now()}`, date: newTx.date || new Date().toISOString().slice(0, 10), description: newTx.description, amount, category };
    setTransactions((s) => [tx, ...s]);
    setNewTx({ date: "", description: "", amount: "" });
  }

  // quick ML-ish trainer: allow user to correct category and update a tiny mapping
  function correctCategory(txId, newCategory) {
    setTransactions((s) => s.map((t) => (t.id === txId ? { ...t, category: newCategory } : t)));
    // In a real app we'd also persist the correction and retrain model.
  }

  function addGoal(name, target) {
    const g = { id: `g_${Date.now()}`, name, targetAmount: parseFloat(target), saved: 0 };
    setGoals((s) => [...s, g]);
  }

  // simulate saving to goals from surplus (user would transfer in real app)
  function contributeToGoal(goalId, amount) {
    setGoals((s) => s.map((g) => (g.id === goalId ? { ...g, saved: Math.min(g.targetAmount, g.saved + amount) } : g)));
  }

  // simple category trend per last 6 months for chart
  const categoryTrends = useMemo(() => {
    const map = {};
    for (const t of transactions) {
      const month = t.date.slice(0, 7);
      map[month] = map[month] || {};
      map[month][t.category] = (map[month][t.category] || 0) + t.amount;
    }
    const months = Object.keys(map).sort().slice(-6);
    const data = months.map((m) => {
      const out = { month: m };
      for (const c of Object.keys(CATEGORY_KEYWORDS)) {
        out[c] = Math.round((map[m] && map[m][c]) || 0);
      }
      return out;
    });
    return data;
  }, [transactions]);

  // UI
  return (
    <div className="min-h-screen bg-slate-50 p-6">
      <header className="max-w-6xl mx-auto mb-6">
        <h1 className="text-3xl font-extrabold">AI Finance — Demo Dashboard</h1>
        <p className="text-sm text-slate-600 mt-1">Automated categorization • Predictive spending • Goals • Budget alerts</p>
      </header>

      <main className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left column: transactions + add */}
        <section className="col-span-1 lg:col-span-1 bg-white shadow rounded p-4">
          <h2 className="font-semibold mb-2">Add transaction</h2>
          <div className="flex flex-col gap-2">
            <input className="input p-2 border rounded" placeholder="YYYY-MM-DD (optional)" value={newTx.date} onChange={(e) => setNewTx({ ...newTx, date: e.target.value })} />
            <input className="input p-2 border rounded" placeholder="Description (e.g. Uber ride)" value={newTx.description} onChange={(e) => setNewTx({ ...newTx, description: e.target.value })} />
            <input className="input p-2 border rounded" placeholder="Amount" value={newTx.amount} onChange={(e) => setNewTx({ ...newTx, amount: e.target.value })} />
            <div className="flex gap-2">
              <button className="px-3 py-2 bg-indigo-600 text-white rounded" onClick={addTransaction}>Add</button>
              <button className="px-3 py-2 border rounded" onClick={() => setTransactions(sampleTransactions())}>Load sample</button>
            </div>
          </div>

          <h3 className="mt-4 font-semibold">Recent transactions</h3>
          <div className="mt-2 space-y-2 max-h-72 overflow-auto">
            {transactions.slice(0, 12).map((t) => (
              <div key={t.id} className="flex justify-between items-center p-2 border rounded">
                <div>
                  <div className="text-sm font-medium">{t.description}</div>
                  <div className="text-xs text-slate-500">{t.date} • {t.category}</div>
                </div>
                <div className="text-right">
                  <div className="font-semibold">{currency(t.amount)}</div>
                  <select className="mt-1 text-xs border rounded p-1" value={t.category} onChange={(e) => correctCategory(t.id, e.target.value)}>
                    {Object.keys(CATEGORY_KEYWORDS).map((c) => <option key={c} value={c}>{c}</option>)}
                  </select>
                </div>
              </div>
            ))}
          </div>
        </section>

        {/* Middle: charts */}
        <section className="col-span-1 lg:col-span-2 bg-white shadow rounded p-4">
          <div className="flex justify-between items-start">
            <div>
              <h2 className="font-semibold">Predictive Analytics</h2>
              <p className="text-sm text-slate-500">Spending trend & next-month prediction</p>
            </div>
            <div className="text-right">
              <div className="text-xs text-slate-500">Predicted next month spend</div>
              <div className="text-xl font-bold">{currency(predictedNext)}</div>
            </div>
          </div>

          <div className="mt-4 grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div className="h-56 bg-white">
              <ResponsiveContainer width="100%" height={200}>
                <LineChart data={monthlyTotals.map((m) => ({ month: m.month, amount: m.amount }))}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Line type="monotone" dataKey="amount" stroke="#4f46e5" strokeWidth={2} />
                </LineChart>
              </ResponsiveContainer>
            </div>

            <div className="h-56 bg-white p-2 rounded">
              <h4 className="text-sm font-medium">Spending by category</h4>
              <ResponsiveContainer width="100%" height={200}>
                <PieChart>
                  <Pie data={categoryRollup} dataKey="amount" nameKey="category" innerRadius={30} outerRadius={70} label>
                    {categoryRollup.map((entry, idx) => (
                      <Cell key={`cell-${idx}`} fill={CHART_COLORS[idx % CHART_COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>

          <div className="mt-4">
            <h4 className="font-medium">Category trends (last 6 months)</h4>
            <div className="mt-2 h-52">
              <ResponsiveContainer width="100%" height={200}>
                <BarChart data={categoryTrends}>
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  {Object.keys(CATEGORY_KEYWORDS).map((c, i) => (
                    <Bar key={c} dataKey={c} stackId="a" fill={CHART_COLORS[i % CHART_COLORS.length]} />
                  ))}
                </BarChart>
              </ResponsiveContainer>
            </div>
          </div>
        </section>

        {/* Right column: budgets & goals and alerts */}
        <section className="col-span-1 lg:col-span-1 bg-white shadow rounded p-4">
          <h2 className="font-semibold">Budgets & Alerts</h2>
          <div className="mt-2 space-y-2">
            {Object.entries(budgets).map(([cat, limit]) => {
              const spent = transactions.filter((t) => t.category === cat).reduce((s, t) => s + t.amount, 0);
              const pct = Math.min(100, Math.round((spent / limit) * 100));
              return (
                <div key={cat} className="p-2 border rounded">
                  <div className="flex justify-between items-center">
                    <div>
                      <div className="text-sm font-medium">{cat}</div>
                      <div className="text-xs text-slate-500">{currency(spent)} / {currency(limit)}</div>
                    </div>
                    <div className="text-sm font-semibold">{pct}%</div>
                  </div>
                  <div className="w-full bg-slate-200 h-2 rounded mt-2 overflow-hidden">
                    <div style={{ width: `${pct}%` }} className={`h-2 ${pct >= 100 ? "bg-red-600" : pct >= 80 ? "bg-yellow-400" : "bg-green-500"}`}></div>
                  </div>
                </div>
              );
            })}
          </div>

          <div className="mt-4">
            <h3 className="font-semibold">Alerts</h3>
            <div className="mt-2 space-y-2">
              {alerts.length === 0 && <div className="text-sm text-slate-500">No alerts — you're good.</div>}
              {alerts.map((a, i) => (
                <div key={i} className="p-2 border rounded text-sm">
                  {a.type === "over" ? (
                    <div className="text-red-700">Over budget in <strong>{a.category}</strong>: spent {currency(a.spent)} vs {currency(a.limit)}</div>
                  ) : (
                    <div className="text-yellow-700">Near budget in <strong>{a.category}</strong>: spent {currency(a.spent)} of {currency(a.limit)}</div>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="mt-4">
            <h3 className="font-semibold">Goals</h3>
            <GoalManager goals={goals} onAdd={addGoal} onContribute={contributeToGoal} />
          </div>
        </section>
      </main>

      <footer className="max-w-6xl mx-auto mt-6 text-xs text-slate-500">Demo app • For production you should add secure auth, encrypted storage, server-side predictive models, and bank integrations (Plaid-like).</footer>
    </div>
  );
}

function GoalManager({ goals, onAdd, onContribute }) {
  const [name, setName] = useState("");
  const [target, setTarget] = useState("");
  return (
    <div>
      <div className="flex gap-2">
        <input className="p-2 border rounded flex-1" placeholder="Goal name e.g. Emergency Fund" value={name} onChange={(e) => setName(e.target.value)} />
        <input className="p-2 border rounded w-28" placeholder="Target" value={target} onChange={(e) => setTarget(e.target.value)} />
        <button className="px-3 py-2 bg-indigo-600 text-white rounded" onClick={() => { onAdd(name, target); setName(""); setTarget(""); }}>Add</button>
      </div>
      <div className="mt-2 space-y-2">
        {goals.length === 0 && <div className="text-sm text-slate-500">No goals yet.</div>}
        {goals.map((g) => (
          <div key={g.id} className="p-2 border rounded">
            <div className="flex justify-between items-center">
              <div>
                <div className="font-medium">{g.name}</div>
                <div className="text-xs text-slate-500">{currency(g.saved)} saved of {currency(g.targetAmount)}</div>
              </div>
              <div className="flex items-center gap-2">
                <div className="text-xs">Progress</div>
                <div className="w-40 bg-slate-200 h-2 rounded overflow-hidden">
                  <div style={{ width: `${Math.round((g.saved / g.targetAmount) * 100)}%` }} className="h-2 bg-indigo-600"></div>
                </div>
                <button className="px-2 py-1 border rounded text-sm" onClick={() => onContribute(g.id, Math.min(500, g.targetAmount - g.saved))}>Contribute ₹500</button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
